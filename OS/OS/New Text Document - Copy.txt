[18bcs073@mepcolinux ex9]$cat ex9.prn
Script started on Friday 12 February 2021 03:31:25 PM IST
[18bcs073@mepcolinux ex9]$cat disk.h
//Disk Schedulingescending Order:
#include<stdio.h>
#include<stdlib.h>
struct list
{
   int cyl;
   int id;
   int flag;argest Element in the given array is 7
};8bcs073@mepcolinux ex7.1]$exit
exit
[18bcs073@mepcolinux ex9]$cat diski.c
#include"disk.h"hursday 11 February 2021 11:35:09 AM IST
void sort(struct list* l,int n)
{
   int i,j;
   struct list temp;
   for(i=0;i<n-1;i++)
   {
      for(j=i+1;j<n;j++)
      {
         if(l[i].cyl>l[j].cyl)
         {
            temp=l[i];
            l[i]=l[j];
            l[j]=temp;
         }
      }
   }
}
int findMin(struct list* l,int n,int cyl)
{
   int i;
   for(i=0;i<n;i++)
   {
      if(cyl<=l[i].cyl)
         return i-1;
   }
}
int findMax(struct list* l,int n,int cyl)
{
   int i;
   for(i=0;i<n;i++)
   {
      if(cyl<=l[i].cyl)
         return i;
   }
}
void copy(struct list* l,struct list* l1,int n)
{
   int i;
   for(i=0;i<n;i++)
   {
      l1[i].cyl=l[i].cyl;
      l1[i].id=l[i].id;
      l1[i].flag=l[i].flag;
   }
}
void fcfs(struct list* li,int n,int init)
{
   int i;
   int head;
   head=abs(li[0].cyl-init);
   printf("\n%d -> %d ",init,li[0].cyl);
   for(i=0;i<n-1;i++)
   {
      head+=abs(li[i].cyl-li[i+1].cyl);
      printf("-> %d ",li[i+1].cyl);
   }
   printf("\n\nTotal no. of head movements = %d\n",head);
}
void sstf(struct list* li,int n,int init)
{
   int i,j,k,min,next;
   int head;
   min=abs(li[0].cyl-init);
   next=0;
   for(i=1;i<n;i++)
   {
      if(min>(abs(init-li[i].cyl)))
      {
         min=abs(init-li[i].cyl);
         next=i;
      }
   }
   head=abs(li[next].cyl-init);
   li[next].flag=0;
   printf("\n%d -> %d ",init,li[next].cyl);
   for(i=1;i<n;i++)
   {
      k=next;
      next=-1;
      min=99999;
      for(j=0;j<n;j++)
      {
         if(min>(abs(li[k].cyl-li[j].cyl)) && li[j].flag==-1)
         {
            min=abs(li[j].cyl-li[k].cyl);
            next=j;
         }
      }
      head+=abs(li[next].cyl-li[k].cyl);
      li[next].flag=k;
      printf("-> %d ",li[next].cyl);
   }
   printf("\n\nTotal no. of head movements = %d\n",head);
}
void scan(struct list* li,int n,int init,int total,int direc)
{
   int i,j,k,min,next;
   int head;
   sort(li,n);
   if(direc==0)//left
   {
      next=findMin(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i>0;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      printf("-> 0 ");
      next=findMax(li,n,init);
      head+=li[0].cyl;
      head+=li[next].cyl;
      printf("-> %d ",li[next].cyl);
      for(i=next;i<n-1;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
   else//right
   {
      next=findMax(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i<n-1;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      printf("-> %d ",total-1);
      head+=abs(li[n-1].cyl-(total-1));
      next=findMin(li,n,init);
      head+=abs((total-1)-li[next].cyl);
      printf("-> %d ",li[next].cyl);
      for(i=next;i>0;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
}
void cscan(struct list* li,int n,int init,int total,int direc)
{
   int i,j,k,min,next;
   int head;
   sort(li,n);
   if(direc==0)//left
   {
      next=findMin(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i>0;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      printf("-> 0 -> %d ",total-1);
      head+=li[0].cyl;
      head+=(total-1);
      printf("-> %d ",li[n-1].cyl);
      next=findMax(li,n,init);
      head+=abs(li[n-1].cyl-(total-1));
      for(i=n-1;i>next;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
   else//right
   {
      next=findMax(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i<n-1;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      printf("-> %d -> 0 ",total-1);
      head+=abs(li[n-1].cyl-(total-1));
      head+=(total-1);
      next=findMin(li,n,init);
      head+=abs(li[0].cyl);
      printf("-> %d ",li[0].cyl);
      for(i=0;i<next;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
}
void look(struct list* li,int n,int init,int direc)
{
   int i,j,k,min,next;
   int head;
   sort(li,n);
   if(direc==0)//left
   {
      next=findMin(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i>0;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      next=findMax(li,n,init);
      head+=abs(li[next].cyl-li[0].cyl);
      printf("-> %d ",li[next].cyl);
      for(i=next;i<n-1;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
   else//right
   {
      next=findMax(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i<n-1;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      next=findMin(li,n,init);
      head+=abs(li[n-1].cyl-li[next].cyl);
      printf("-> %d ",li[next].cyl);
      for(i=next;i>0;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
}
void clook(struct list* li,int n,int init,int direc)
{
   int i,j,k,min,next;
   int head;
   sort(li,n);
   if(direc==0)//left
   {
      next=findMin(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i>0;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      head+=abs(li[0].cyl-li[n-1].cyl);
      printf("-> %d ",li[n-1].cyl);
      next=findMax(li,n,init);
      for(i=n-1;i>next;i--)
      {
         head+=abs(li[i].cyl-li[i-1].cyl);
         printf("-> %d ",li[i-1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
   else//right
   {
      next=findMax(li,n,init);
      head=abs(li[next].cyl-init);
      printf("\n%d -> %d ",init,li[next].cyl);
      for(i=next;i<n-1;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      head+=abs(li[0].cyl-li[n-1].cyl);
      next=findMin(li,n,init);
      printf("-> %d ",li[0].cyl);
      for(i=0;i<next;i++)
      {
         head+=abs(li[i].cyl-li[i+1].cyl);
         printf("-> %d ",li[i+1].cyl);
      }
      printf("\n\nTotal no. of head movements = %d\n",head);
   }
}
[18bcs073@mepcolinux ex9]$cat diska.c
#include"disk.h"
int main()
{
   int ch,n,i,init,prev,direc,total;
   struct list* li;
   struct list* l;
   printf("\nEnter the no. of reqd cylinders : ");
   scanf("%d",&n);
   li=malloc(sizeof(struct list)*(n));
   l=malloc(sizeof(struct list)*(n));
   printf("\nEnter the cylinder list\n");
   for(i=0;i<n;i++)
   {
      scanf("%d",&li[i].cyl);
      li[i].id=i;
      li[i].flag=-1;
   }
   printf("\nEnter the total no. of cylinders : ");
   scanf("%d",&total);
   printf("\nEnter the current head position : ");
   scanf("%d",&init);
   printf("\nEnter the prev head position : ");
   scanf("%d",&prev);
   if((init-prev)<0)
      direc=0;
   else
      direc=1;
   do
   {
      printf("\n1.FCFS\n2.SSTF\n3.SCAN\n4.C-Scan\n5.LOOK\n6.C-LOOK\n\nChoice : ");
      scanf("%d",&ch);
      switch(ch)
      {
         case 1:copy(li,l,n);
                fcfs(l,n,init);
                break;
         case 2:copy(li,l,n);
                sstf(l,n,init);
                break;
         case 3:copy(li,l,n);
                scan(l,n,init,total,direc);
                break;
         case 4:copy(li,l,n);
                cscan(l,n,init,total,direc);
                break;
         case 5:copy(li,l,n);
                look(l,n,init,direc);
                break;
         case 6:copy(li,l,n);
                clook(l,n,init,direc);
                break;
         default:return 0;
      }
   }while(ch<=6);
}

[18bcs073@mepcolinux ex9]$cat makefile
out.exe: diski.o diska.o
        cc diski.o diska.o -o out.exe
diska.o:diska.c
        cc -c diska.c
diski.o:diski.c
        cc -c diski.c
[18bcs073@mepcolinux ex9]$./out.exe

Enter the no. of reqd cylinders : 7

Enter the cylinder list
86
913
1774
448
2509
1022
130

Enter the total no. of cylinders : 3000

Enter the current head position : 188

Enter the prev head position : 150

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 1

188 -> 86 -> 913 -> 1774 -> 448 -> 2509 -> 1022 -> 130

Total no. of head movements = 7556

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 2

188 -> 130 -> 86 -> 448 -> 913 -> 1022 -> 1774 -> 2509

Total no. of head movements = 2525

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 3

188 -> 448 -> 913 -> 1022 -> 1774 -> 2509 -> 2999 -> 130 -> 86

Total no. of head movements = 5724

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 4

188 -> 448 -> 913 -> 1022 -> 1774 -> 2509 -> 2999 -> 0 -> 86 -> 130

Total no. of head movements = 5940

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 5

188 -> 448 -> 913 -> 1022 -> 1774 -> 2509 -> 130 -> 86

Total no. of head movements = 4744

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 6

188 -> 448 -> 913 -> 1022 -> 1774 -> 2509 -> 86 -> 130

Total no. of head movements = 4788

1.FCFS
2.SSTF
3.SCAN
4.C-Scan
5.LOOK
6.C-LOOK

Choice : 7
[18bcs073@mepcolinux ex9]$exit
exit

Script done on Friday 12 February 2021 03:32:56 PM IST